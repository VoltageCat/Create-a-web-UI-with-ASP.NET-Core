Your team has split up the work for the pizza inventory management app. Your teammates have created the ASP.NET Core web app for you, and they've already built a service to read and write pizzas to a database. You've been assigned to work on the Pizza List page, which will display a list of pizzas and allow you to add new pizzas to the database. You'll start by taking a tour of the project to understand how it's organized.

# Obtain the project files #

If you're using GitHub Codespaces, just open the repository in the browser, select Code, and then create a new codespace on the main branch.

Review your teammates' work

Let's take a moment to get familiar with the existing code in the ContosoPizza folder. The project is an ASP.NET Core web app created using the dotnet new webapp command. The changes your teammates made are described below.

A *Models* folder was added to the project.

The model folder contains a Pizza class that represents a pizza.

A *Data* folder was added to the project.

The data folder contains a PizzaContext class that represents the database context. It inherits from the DbContext class from Entity Framework Core. Entity Framework Core is an object-relational mapper (ORM) that makes it easier to work with databases.

A *Services* folder was added to the project.

The services folder contains a PizzaService class that exposes methods to list and add pizzas.
The PizzaService class uses the PizzaContext class to read and write pizzas to the database.
The class is registered for dependency injection in Program.cs (line 10).

Entity Framework Core generated a few things, too:

A *Migrations* folder was generated.

The migrations folder contains code to create the database schema.

The *SQLite* database file ContosoPizza.db was generated.

If you have the SQLite extension installed (or you're using GitHub Codespaces), you can view the database by right-clicking the file and selecting Open Database. The database schema is shown in the SQLite Explorer tab of the Explorer pane.

Review the Razor Pages project structure

Everything else in the project is unchanged from when the project was created. The following table describes the project structure that was generated by the dotnet new webapp command.


Name                	Description
Pages/	                Contains Razor Pages and supporting files. Each Razor page has a .cshtm
                        file and a .cshtml.cs PageModel class file.

wwwroot/	            Contains static asset files like HTML, JavaScript, and CSS.

ContosoPizza.csproj	    Contains project configuration metadata, such as dependencies.

Program.cs	            Serves as the app's entry point and configures app behavior, like routing.


Other noteworthy observations:

Razor page files and their paired PageModel class file

Razor pages are stored in the Pages directory. As noted above, each Razor page has a .cshtml file and a .cshtml.cs PageModel class file. The PageModel class allows separation of a Razor page's logic and presentation, defines page handlers for requests, and encapsulates data properties and logic scoped to its Razor page.

The Pages directory structure and routing requests

Razor Pages uses the Pages directory structure as the convention for routing requests. The following table shows how URLs map to filenames:

URL	                    Maps to Razor page

www.domain.com	        Pages/Index.cshtml
www.domain.com/Index	Pages/Index.cshtml
www.domain.com/Privacy	Pages/Privacy.cshtml
www.domain.com/Error	Pages/Error.cshtml

Subfolders in the Pages directory are used to organize Razor pages. For example, if there were a Pages/Products directory, the URLs would reflect that structure:

URL	                            Maps to Razor page
www.domain.com/Products	        Pages/Products/Index.cshtml
www.domain.com/Products/Index	Pages/Products/Index.cshtml
www.domain.com/Products/Create	Pages/Products/Create.cshtml

Layout and other shared files

There are several files that are shared across multiple pages. These files determine common layout elements and page imports. The following table describes the purpose of each file.

File	                        Description
_ViewImports.cshtml	            Imports namespaces and classes that are used across multiple pages.
_ViewStart.cshtml	            Specifies the default layout for all Razor pages.
Pages/Shared/_Layout.cshtml	    This is the layout specified by the _ViewStart.cshtml file
                                Implements common layout elements across multiple pages.
Pages/Shared/_ValidationScriptsPartial.cshtml	Provides validation functionality to all pages.

Run the project for the first time

Let's run the project so we can see it in action.

Right-click on the ContosoPizza folder in the Explorer and select Open in Integrated Terminal. This opens a terminal window in the context of the project folder.

In the terminal window, enter the following command: dotnet watch

This command:

    x   Builds the project.
    x   Starts the app.
    x   Watches for file changes and restarts the app when it detects a change.

The IDE prompts you to open the app in a browser. Select Open in Browser.