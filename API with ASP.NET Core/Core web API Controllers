In the previous exercise, you created a web application that provides sample weather forecast data, then interacted with it in the HTTP REPL.

Before you dive in to writing your own PizzaController class, let's look at the code in the WeatherController sample to understand how it works. In this unit, you'll learn how WeatherController uses the ControllerBase base class and a few .NET attributes to build a functional web API in a few dozen lines of code. After you understand those concepts, you'll be ready to write your own PizzaController class.

The base class: ControllerBase

A controller is a public class with one or more public methods known as actions. By convention, a controller is placed in the project root's Controllers directory. The actions are exposed as HTTP endpoints via routing. So an HTTP GET request to https://localhost:{PORT}/weatherforecast causes the Get() method of the WeatherForecastController class to be executed.

The first thing to notice is that this class inherits from the ControllerBase base class. This base class provides a lot of standard functionality for handling HTTP requests, so you can focus on the specific business logic for your application.

API controller class attributes

Two important attributes are applied to WeatherForecastController, as shown in the following code:

[ApiController]
[Route("[controller]")]
public class WeatherForecastController : ControllerBase

[ApiController] enables opinionated behaviors that make it easier to build web APIs. Some behaviors include parameter source inference, attribute routing as a requirement, and model validation error-handling enhancements.

[Route] defines the routing pattern [controller]. The [controller] token is replaced by the controller's name (case-insensitive, without the Controller suffix). This controller handles requests to https://localhost:{PORT}/weatherforecast.

Providing weather results with the Get() method

WeatherForecastController includes a single controller action, designated by the [HttpGet(Name = "GetWeatherForecast")] attribute. This attribute routes HTTP GET requests to the public IEnumerable<WeatherForecast> Get() method. That's why, in the previous exercise, requests to https://localhost:{PORT}/weatherforecast caused the weather results to be returned.

As you'll learn later in this module, other common actions are associated with a web API that performs CRUD operations (GET, PUT, POST, DELETE). But an API controller needs to implement only one controller action.

In this case, you're getting the full list of WeatherForecast returned. The GET operation also allows for retrieving a single item by passing in an identifier. In ASP.NET, you can achieve this by using the [HttpGet("{id}")] attribute. You'll implement that attribute in the next exercise.

Now that you've learned the fundamental components of a web API controller, you're ready to create your own PizzaController class.